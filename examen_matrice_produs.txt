#include <iostream>
#include <omp.h>
#include "pch.h"

/* --------------------------------------------------------------------
Implementați un program ce calculează produsul a 2 matrici
cu N linii și N coloane iar apoi paralelizați programul utilizand
OpenMP
Urmati, pe rand, pasii de mai jos.
--------------------------------------------------------------------*/
int main()
{
	// Numarul N de linii/coloane
	int N = 1000;
	// Prima matrice
	int *a;
	// A 2-a matrice
	int *b;
	// Matricea rezultat
	int *c;
	/* --------------------------------------------------------------------
	1. Alocati memorie pe host pentru cele trei matrici:
	0.333 puncte
	--------------------------------------------------------------------*/

/* ------------------------ REZOLVARE PCT 1 -----------------------------*/
/* ------------------------ CODUL TAU DE AICI ---------------------------*/





	a = new int[N*N];
	b = new int[N*N];
	c = new int[N*N];





/* ------------------------ CODUL TAU PANA AICI ---------------------------*/
/* --------------------------------------------------------------------
2. Initializați matricile a si b dupa cum urmeaza: elementele de pe prima coloana
au valoarea 1, elementele de pe a 2-a coloana au valoarea 2, cele de pe a
3-a au valoarea 4, etc
0.333 puncte
--------------------------------------------------------------------*/
/* ------------------------ REZOLVARE PCT 2 -----------------------------*/
/* ------------------------ CODUL TAU DE AICI ---------------------------*/


	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			a[i*N + j] = i;
			b[i*N + j] = i;
		}
	}

//Afisare matrici
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j <N; j++)
			std::cout << a[i*N+j] << ' ';
			std::cout << " ";

			
	}



/* ------------------------ CODUL TAU PANA AICI ---------------------------*/
	/* --------------------------------------------------------------------
3. Implementați inmultirea celor doua matrici si scrieti rezultatul in
matiricea c
0.333 puncte
--------------------------------------------------------------------*/
/* ------------------------ REZOLVARE PCT 3 -----------------------------*/
/* ------------------------ CODUL TAU DE AICI ---------------------------*/
	std::cout << "Elementele matricei produs ";
	for (int i = 1; i < N; i++)
		for (int j = 1; j < N; j++)
			for (int k = 1; k < N; k++)
				c[i*N + j] += a[i*N + k] * b[k*N + j];

	for (int i = 1; i < N; i++)
	{
		for (int j = 1; j < N; j++)
			std::cout << c[i*N + j] << " ";

	}







/* ------------------------ CODUL TAU PANA AICI ---------------------------*/
/* --------------------------------------------------------------------
4. Implementați varianta paralela a calculului de la cerinta precedenta
Indicatie: doar bucla for exterioara (ce parcurge liniile) se distribuie
pe mai multe fire de executie
1 punct
--------------------------------------------------------------------* /
/* ------------------------ REZOLVARE PCT 4 -----------------------------*/
/* ------------------------ CODUL TAU DE AICI ---------------------------*/



int thread_id = omp_get_thread_num();
std::cout << thread_id;
std::cout << "Elementele matricei produs ";
#pragma omp parallel for
for (int i = 1; i < N; i++)
	for (int j = 1; j < N; j++)
		for (int k = 1; k < N; k++)
			c[i*N + j] += a[i*N + k] * b[k*N + j];

for (int i = 1; i < N; i++)
{
	for (int j = 1; j < N; j++)
		std::cout << c[i*N + j] << " ";

}





/* ------------------------ CODUL TAU PANA AICI ---------------------------*/
}